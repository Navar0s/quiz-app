# docker-compose.override.yml
services:
  # --- API für die Entwicklungsumgebung ---
  api_dev: # NEUER, EIGENER SERVICE-NAME
    build: # Wir müssen die Build-Konfig hierher kopieren/anpassen
      context: ./backend
      dockerfile: Dockerfile
    container_name: quiz-api-dev # Eindeutiger Name
    image: ${USER:-quizuser}/quiz-app-api-dev:${TAG:-latest}
    ports:
      - "3001:${PORT:-3001}"
    volumes:
      - ./backend/public/audio:/app/public/audio
      - ./backend/data_dev:/app/data
      - ./backend/logs_dev:/app/logs
    env_file: # env_file aus der Haupt-Config hierher, wenn benötigt
      - ./backend/.env
    environment:
      - NODE_ENV=development
    networks: # Selbes Netzwerk wie die Live-Instanz ist okay, oder ein eigenes Dev-Netzwerk
      - quiz-net
    # `restart` ist für Dev oft nicht so wichtig, kann aber übernommen werden.

  # --- Nginx für die Entwicklungsumgebung ---
  nginx_dev: # NEUER, EIGENER SERVICE-NAME
    build: # Build-Konfig hierher kopieren/anpassen
      context: .
      dockerfile: ./nginx/Dockerfile.dev
    container_name: quiz-nginx-dev # Eindeutiger Name
    image: ${USER:-quizuser}/quiz-app-nginx-dev:${TAG:-latest}
    ports:
      - "8080:80"
    volumes:
      # Wichtig: Diese Nginx-Instanz muss wissen, wie sie das dev-Backend (api_dev) erreicht.
      # Wir brauchen eine quiz.dev.conf, die auf 'api_dev' zeigt.
      - ./nginx/quiz.dev.conf:/etc/nginx/conf.d/default.conf:ro
      - ./backend/public:/var/www:ro
      #- ./frontend/dist:/usr/share/nginx/html:ro
    networks:
      - quiz-net
    depends_on:
      - api_dev # Hängt vom api_dev Service ab
    # `restart` kann übernommen werden.

# Das 'networks' Statement aus der Haupt-docker-compose.yml wird für die hier
# definierten Services verwendet, wenn sie dasselbe Netzwerk referenzieren.
# Ein explizites 'networks' hier ist nur nötig, wenn du ein komplett neues,
# isoliertes Dev-Netzwerk erstellen willst.
